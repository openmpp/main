<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>

    <!--  The absolute path of the project directory, which is the working directory of all relative paths -->
    <WORKING_DIR>$([System.IO.Path]::GetFullPath('$(ProjectDir)'))</WORKING_DIR>
    
    <!-- 
    Begin: Assign default values for properties visible in VS integration
    -->
    
    <!--  Default value for OM_ROOT -->
    <OM_ROOT Condition="'$(OM_ROOT)'==''">$(ProjectDir)../../..</OM_ROOT>

    <!--  Default value for MODEL_NAME -->
    <DEFAULT_MODEL_NAME>$([MSBuild]::MakeRelative($(ProjectDir)../..,$(ProjectDir)..))</DEFAULT_MODEL_NAME> <!--  Name of grandparent directory of project, e.g. NewCaseBased -->
    <DEFAULT_MODEL_NAME>$(DEFAULT_MODEL_NAME.TrimEnd(&quot;\&quot;))</DEFAULT_MODEL_NAME>     <!--  Remove trailing backslash -->
    <MODEL_NAME Condition="'$(MODEL_NAME)'==''">$(DEFAULT_MODEL_NAME)</MODEL_NAME>
    
    <!--  Default value for SCENARIO_NAMES -->
    <SCENARIO_NAMES Condition="'$(SCENARIO_NAMES)'==''">Default</SCENARIO_NAMES>
    <!--  Trickery to create parallel folder locations -->
    <SCENARIO_FOLDERS>../parameters/$(SCENARIO_NAMES.Replace(';', ';../parameters/'))</SCENARIO_FOLDERS>

    <!--  Default value for MODEL_INI -->
    <MODEL_INI Condition="'$(MODEL_INI)'=='' And Exists('../$(MODEL_NAME).ini')">$(MODEL_NAME).ini</MODEL_INI>
    <!--  Fully qualified path of MODEL_INI (is in model root AKA SolutionDir) -->
    <MODEL_INI_PATH Condition="'$(MODEL_INI)' != ''">$([System.IO.Path]::GetFullPath('$(ProjectDir)../$(MODEL_INI)'))</MODEL_INI_PATH>

    <!-- 
    End: Set default values for user-specified properties
    -->

    <!--  Default value for MODEL_CODE_DIR -->
    <MODEL_CODE_DIR Condition="'$(MODEL_CODE_DIR)'==''">../code</MODEL_CODE_DIR>

    <!--  Default value for OMC_USE_DIR -->
    <OMC_USE_DIR Condition="'$(OMC_USE_DIR)'==''">$(OM_ROOT)/use</OMC_USE_DIR>
  
    <OM_BIN_DIR Condition="'$(OM_BIN_DIR)'==''">$(OM_ROOT)/bin</OM_BIN_DIR>

    <OMC_EXE>omc.exe</OMC_EXE>
    <DBCOPY_EXE>dbcopy.exe</DBCOPY_EXE>
    <MPIEXEC_EXE>mpiexec.exe</MPIEXEC_EXE>
    <SQLITE_EXE>sqlite3.exe</SQLITE_EXE>
    <SQLITE_EXE_DIR Condition="'$(SQLITE_EXE_DIR)'==''">$(OM_BIN_DIR)</SQLITE_EXE_DIR>

    <COMPLETE_OMC_EXE>&quot;$(OM_BIN_DIR)/$(OMC_EXE)&quot;</COMPLETE_OMC_EXE>
    <COMPLETE_SQLITE_EXE>&quot;$(SQLITE_EXE_DIR)/$(SQLITE_EXE)&quot;</COMPLETE_SQLITE_EXE>
    <COMPLETE_MPIEXEC_EXE>&quot;$(MSMPI_BIN)/$(MPIEXEC_EXE)&quot;</COMPLETE_MPIEXEC_EXE>

    <OM_INC_DIR Condition="'$(OM_INC_DIR)'==''">$(OM_ROOT)/include</OM_INC_DIR>
    <OM_LIB_INC_DIR Condition="'$(OM_LIB_INC_DIR)'==''">$(OM_ROOT)/openm/libopenm/include</OM_LIB_INC_DIR>
    <OM_SQL_DIR Condition="'$(OM_SQL_DIR)'==''">$(OM_ROOT)/sql</OM_SQL_DIR>

    <CUSTOM_CPP>$(MODEL_CODE_DIR)/custom.cpp</CUSTOM_CPP>

    <FIXED_PARAMETERS_FOLDER Condition="'$(FIXED_NAME)'!=''">../parameters/$(FIXED_NAME)</FIXED_PARAMETERS_FOLDER>
    <ENABLE_FIXED_PARAMETERS>false</ENABLE_FIXED_PARAMETERS>
    <ENABLE_FIXED_PARAMETERS Condition="'$(FIXED_PARAMETERS_FOLDER)'!=''">true</ENABLE_FIXED_PARAMETERS>

    <!--
    If this is F5 Debug or Ctrl-F5 model run under Visual Studio then
      PUBLISH_DIR, MODEL_BIN_DIR, TargetDir, LocalDebuggerWorkingDirectory
    must be identical
    otherwise model.exe always fail to run because there is no model.sqlite in current directory.
    -->
    <MODEL_BIN_DIR>$(ProjectDir)bin</MODEL_BIN_DIR>
    <PUBLISH_DIR>$(MODEL_BIN_DIR)</PUBLISH_DIR>
    <PUBLISH_SQLITE>$(PUBLISH_DIR)/$(MODEL_NAME).sqlite</PUBLISH_SQLITE>
    
    <OMC_IN_DIR>$(MODEL_CODE_DIR)</OMC_IN_DIR>

    <OMC_OUT_DIR>$(ProjectDir)src</OMC_OUT_DIR>
    <PCH_CXX>$(OMC_OUT_DIR)/pch.cxx</PCH_CXX>

    <BUILD_DIR>$(ProjectDir)build</BUILD_DIR>

    <PLATFORM_SUFFIX Condition="'$(Platform)'=='Win32'"></PLATFORM_SUFFIX>
    <PLATFORM_SUFFIX Condition="'$(Platform)'=='x64'">64</PLATFORM_SUFFIX>
    <CONFIG_SUFFIX Condition="'$(Configuration)'=='Release'"></CONFIG_SUFFIX>
    <CONFIG_SUFFIX Condition="'$(Configuration)'=='Debug'">D</CONFIG_SUFFIX>

    <MODEL_EXE>$(MODEL_NAME)$(CONFIG_SUFFIX)$(MPI_SUFFIX).exe</MODEL_EXE>

    <!--  Model messages (translation file) -->
    <MODEL_MSG_INI>$(MODEL_NAME).message.ini</MODEL_MSG_INI>
    <MODEL_MSG_INI_OMC_OUT>$(OMC_OUT_DIR)/$(MODEL_MSG_INI)</MODEL_MSG_INI_OMC_OUT>
    
    <!--
    get model root from environment if defined or use default value: OM_MyModelName=../../
    -->
    <MODEL_ROOT_NAME>OM_$(MODEL_NAME)</MODEL_ROOT_NAME>
    <MODEL_ROOT_VALUE>$([System.Environment]::GetEnvironmentVariable('$(MODEL_ROOT_NAME)'))</MODEL_ROOT_VALUE>
    <MODEL_ROOT_ENV Condition="'$(MODEL_ROOT_VALUE)'==''">$(MODEL_ROOT_NAME)=../..</MODEL_ROOT_ENV>
    <MODEL_ROOT_ENV Condition="'$(MODEL_ROOT_VALUE)'!=''">$(MODEL_ROOT_NAME)=$(MODEL_ROOT_VALUE)</MODEL_ROOT_ENV>

    <DBCOPY_EXPORT_CSV Condition="'$(DBCOPY_EXPORT_CSV)'!='true'">false</DBCOPY_EXPORT_CSV>

    <!-- 
    The property DisableFastUpToDateCheck forces Visual Studio to always use MSBuild to evaluate dependencies,
    and do it right for more complex dependencies.  If this is not set VS sometimes thinks things are up-to-date
    when they are not, and does not launch MSBuild.
    -->
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
    
  </PropertyGroup>
  
  <PropertyGroup>
    <!-- omc -f option to supply fixed parameter -->
    <OMC_IN_FIXED_OPT Condition="'$(ENABLE_FIXED_PARAMETERS)'=='true'">-f $(FIXED_PARAMETERS_FOLDER)</OMC_IN_FIXED_OPT>
    <!-- omc -noMetadata option -->
    <OMC_NO_METADATA_OPT Condition="'$(NO_METADATA)'=='true'">-Omc.noMetadata 1</OMC_NO_METADATA_OPT>
    <!-- omc -modelDoc option -->
    <OMC_MODEL_DOC_OPT Condition="'$(MODEL_DOC)'=='true'">-Omc.ModelDoc 1</OMC_MODEL_DOC_OPT>
    <!-- omc -modelDevDoc option -->
    <OMC_MODEL_DEVDOC_OPT Condition="'$(MODEL_DEVDOC)'=='true'">-Omc.ModelDevDoc 1</OMC_MODEL_DEVDOC_OPT>
    <!-- omc -noLineDirectives option -->
    <OMC_NO_LINE_DIRECTIVES_OPT Condition="'$(NO_LINE_DIRECTIVES)'=='true'">-Omc.noLineDirectives 1</OMC_NO_LINE_DIRECTIVES_OPT>
  </PropertyGroup>

  <PropertyGroup>
    
    <!-- 
    Use this to disable #line directives in generated cpp files (0=use, 1=disable)
    -->
    <NO_LINE_DIRECTIVES Condition="'$(NO_LINE_DIRECTIVES)'==''">0</NO_LINE_DIRECTIVES>
  </PropertyGroup>

  <!-- 
  Use this to choose database library provider, now only SQlite supported
    SQLITE - use SQlite version
  Pass through the value from the User Macro DB_PROVIDER in OpenM++.props.
  -->
  <PropertyGroup Condition="'$(DB_PROVIDER)'==''">
    <DB_PROVIDER>SQLITE</DB_PROVIDER>
  </PropertyGroup>

  <PropertyGroup>
    <OM_DB_USE>$(DB_PROVIDER)</OM_DB_USE>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OM_DB_USE)'=='SQLITE'">
    <OM_DB_DEF>OM_DB_SQLITE</OM_DB_DEF>
    <OM_LIB_DB_INC>$(OM_ROOT)/openm/libsqlite</OM_LIB_DB_INC>
    <OM_DB_CPP_DEF>SQLITE_ENABLE_COLUMN_METADATA;SQLITE_OMIT_LOAD_EXTENSION;HAVE_ACOSH;HAVE_ASINH;HAVE_ATANH;</OM_DB_CPP_DEF>
  </PropertyGroup>

  <!-- 
  Use this to choose message passing library provider
    MPI   - use MPI-based version (you must have MS-MPI installed)
    EMPTY - use empty version of the library which does nothing
  Pass through the value from the User Macro GRID_COMPUTING in OpenM++.props.
  -->
  <PropertyGroup Condition="'$(GRID_COMPUTING)'==''">
    <GRID_COMPUTING>EMPTY</GRID_COMPUTING>
  </PropertyGroup>

  <PropertyGroup>
    <OM_MSG_USE>$(GRID_COMPUTING)</OM_MSG_USE>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OM_MSG_USE)'=='EMPTY'">
    <OM_MSG_DEF>OM_MSG_EMPTY</OM_MSG_DEF>
    <OM_MSG_INC></OM_MSG_INC>
    <OM_MSG_LIB></OM_MSG_LIB>
    <OM_MSG_LIB_DIR></OM_MSG_LIB_DIR>
    <MPI_SUFFIX></MPI_SUFFIX>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OM_MSG_USE)'=='MPI'">
    <OM_MSG_DEF>OM_MSG_MPI</OM_MSG_DEF>
    <OM_MSG_INC>$(MSMPI_INC)</OM_MSG_INC>
    <OM_MSG_LIB>msmpi.lib;</OM_MSG_LIB>
    <MPI_SUFFIX>_mpi</MPI_SUFFIX>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OM_MSG_USE)'=='MPI' And '$(Platform)'=='Win32'">
    <OM_MSG_LIB_DIR>$(MSMPI_LIB32)</OM_MSG_LIB_DIR>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OM_MSG_USE)'=='MPI' And '$(Platform)'=='x64'">
    <OM_MSG_LIB_DIR>$(MSMPI_LIB64)</OM_MSG_LIB_DIR>
  </PropertyGroup>

  <!-- 
  Use this to choose UTF-8 conversion library
    MSSTL - use MS VC++ wstring_convert and codecvt_utf8
    ICONV - use libiconv
  -->
  <PropertyGroup>
    <OM_UCVT_USE>MSSTL</OM_UCVT_USE>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OM_UCVT_USE)'=='MSSTL'">
    <OM_UCVT_DEF>OM_UCVT_MSSTL</OM_UCVT_DEF>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OM_UCVT_USE)'=='ICONV'">
    <OM_UCVT_DEF>OM_UCVT_ICONV</OM_UCVT_DEF>
  </PropertyGroup>

</Project>
