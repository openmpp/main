//LABEL (IDMM, EN) Core simulation functions

/* NOTE(IDMM, EN)
	This module contains the core of the IDMM model.  It controls the simulation engine. 
*/

#include "omc/optional_IDE_helper.h" // help an IDE editor recognize model symbols

#if 0 // Hide non-C++ syntactic island from IDE

// These are the languages in which IDMM can be viewed.
languages 
{
	EN, // English
	FR	// Français
};

version 2, 0, 0, 0;

model_type time_based, just_in_time;

// types
time_type		double;

real_type		double;
counter_type	ushort;
integer_type	short;
index_type		ushort;



actor_set Host asAllHosts; //EN All Hosts

#endif // Hide non-C++ syntactic island from IDE

void PreSimulation()
{
	// Note that actors cannot be used in PreSimulation, since Modgen has not
	// yet created the associated internal structures.
	// Only parameters (and global varaibles) can be manipulated in PreSimulation.
	// This is a corollary of the fact that PreSimulation is shared 
	// among all replicates / sub-samples.  In other words it is called
	// only once in the course of a model execution.
}


void Simulation()
{
    extern void LogSimulationStart(); // defined elsewhere
    extern void SimulateEvents(); // defined elsewhere

    // Write simulation start message to log
    LogSimulationStart();

    // Set the maximum time used in the simulation. This allows the simulation framework
    // to use fixed precision arithmetic for time-related quantities for consistent results.
    // A fixed value is used rather than Simulation End so that simulation results
    // are not affected by a change of time horizon.
    SetMaxTime(100.0);

	// Create the single Ticker entity.
	auto paTicker = new Ticker();
	// Enter it into the the simulation.
	paTicker->Start();

	// Create the initial population of Hosts, and infect some probabilistically.
	for ( int nJ = 0; nJ < NumberOfHosts; nJ++ ) {
		auto prHost = new Host();
		prHost->Start();
		if (InitialDiseasePrevalence > RandUniform(5)) {
			prHost->Infect();
		}
	}

	// Construct the initial social network.
	int nHosts = asAllHosts->Count();
	for ( int nJ = 0; nJ < nHosts; nJ++ ) {
		auto prHost = asAllHosts->Item( nJ );
		for (int nK = 0; nK < ContactsOutPerHost; nK++ ) {
			// Choose a host randomly from all hosts
			auto prContact = asAllHosts->GetRandom( RandUniform(3) );
			// Add it to the outgoing contacts link.
			// Note that if the contact happens to already be a contact, it will not be added.
			// That's because Modgen links can contain no duplicates.
			// Modgen links are like mathematical sets.
			if (prContact != prHost) {
				// do not link to self
				prHost->mlContactsOut->Add( prContact );
			}
		}
	}

    // Simulate events until there are no more.
    SimulateEvents();
}

